Javascript
	Scripting languaga
	oo and functionla programming
	Interpreted not compiled
	loosly typeed:
		data type is decided on runtime literal value
	Event based, callbacks
	Single threaded
	-----------------
	stack
	Api registery(callback)
	ArrayBlockQueue--> event queue
	eventloop --> infinetly checks for the stack is empty then take from queue and pushes to stack.
---------------------------

Java script engines
==>V8 engine ==> google ==> used in chrome
==>SpiderMonkey ==> firefox, adobe products		
==> Chakra,continum ==> Microsoft
==> Nashhorn ==> Oracle, Java	

supports ES5 ==> ECMA script 5 version of js
---------------------

hoisting --> declare varibale nay where is pushing to the function level, not defined by var then it is hoisted to global level
Scope : global scope
	function scope

hoistng called implicit

"use strcit"; will not allow implicit variables

==============================

types
	undefined, numbers, string, boolean, object, array, null

js has semicolon insertion;
return x+y;

return
	x+y; ==> return ; x+y;

return {
x+y;
}// AST abstract synatx tree
======================

in Arrays, prefer use push rather than index

==============

Objects in Js:
best way to set variables is use Object.defineProperty(obj,"id", {"value" : 10 });

1.Constructor pattern:
object owned instance methods ==> use for singleton pattern

2.Class owned instance methods
Person.protoptype.getDetails ==> insatnce methods

Person.comapre ==> static  ==> without prototype it becomes static


Addy Osmani - JS design patterns

3. JSON : JavaScriptObjectNotation

var Person={
	id:11,
	name:"Mahesh",
	getDetails:function(){
		return this.id+","+this.name;
	}
};

var f = person.getDetails.bind(person);
f.();

var f = person.getDetails;
f.call(person);

======================================

Functional style of programming


===============

code . will open the visual studio code in the given path
! <tab> generates the html sudocide
ctrl+shift+i --> opens the console in chrome
rxmarbles.com --> gives teh pictorial view.


==============================================================
Closure - function returns a function, in that return function holds the main function arguments
curying - adder(10)(2)

==============================================

ES6 ==> ECMAScript 2015 ==> ES 2015
ES7 ==> ESNext

Transpilers ==> to conevrt es6/7 to lower versions
Babel, Traucer are popular transpilers

===\
ES6 features
1. Scope
	new keywords are let and const
let for block level scope
const is is for constants

2. Arrow operator

let add = (x,y) => {
return x+y;
}

let sub = (x,y) => x-y;

3. default values in arguments

4. New string literal ``
var name = "Mahesh";
var msg = `
This is a line 1
thos is line 2
Name is ${name}
`;


5. Deconstructing
	A. arrays
	B. Objects

var [r,b,b,...others] = arr;

var {name,price} = p;

let ob = {"id":1, "name":"s"};
let r=ob; //reference ==> deep copy
let mn= {...ob}; //copy ==> shallow copy

6. Class

7. Promise API

	Synchronous
	function doTask(){
	}
	
let res=doTask();

---------
Async

doTask().then(
function(data){

},
function(rej){

}
)
.catch(err){
}
 ==================================


Generators == uses a separate thread and return value sends to main thread (saga)



















